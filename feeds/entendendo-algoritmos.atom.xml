<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>@aninhasalesp - Entendendo algoritmos</title><link href="/" rel="alternate"/><link href="/feeds/entendendo-algoritmos.atom.xml" rel="self"/><id>/</id><updated>2025-08-12T00:00:00-03:00</updated><entry><title>Explorando o livro ‚ÄúEntendendo Algoritmos‚Äù,¬†cap.1</title><link href="/2025/08/12/explorando-o-livro-entendendo-algoritmos-cap1/" rel="alternate"/><published>2025-08-12T00:00:00-03:00</published><updated>2025-08-12T00:00:00-03:00</updated><author><name>Ana Paula Sales</name></author><id>tag:None,2025-08-12:/2025/08/12/explorando-o-livro-entendendo-algoritmos-cap1/</id><summary type="html">&lt;p&gt;Resumo, an√°lises e exerc√≠cios pr√°ticos sobre o Cap√≠tulo 1 do livro &amp;#8220;Entendendo Algoritmos&amp;#8221;, com sugest√µes de desafios no LeetCode e&amp;nbsp;Exercism.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In√≠cio de uma s√©rie de estudos sobre o livro &lt;a href="https://www.kufunda.net/publicdocs/Entendendo%20Algoritmos%20Um%20guia%20ilustrado%20para%20programadores%20e%20outros%20curiosos%20(Aditya%20Y.%20Bhargava).pdf"&gt;Entendendo Algoritmos&lt;/a&gt; de Aditya Y. Bhargava. Uma leitura surpreendentemente acess√≠vel e fundamental para entender e pensar de forma mais&amp;nbsp;eficiente.&lt;/p&gt;
&lt;p&gt;Esse livro foi indicado por uma amiga, &lt;a href="https://github.com/anapaulamendes"&gt;Ana Paula Mendes&lt;/a&gt;, e eu n√£o imaginava o quanto iria gostar. Ele √© simples de entender e mostra como conceitos de ci√™ncia da computa√ß√£o est√£o presentes no nosso dia a dia, mesmo para quem nunca&amp;nbsp;programou.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/livro1.jpg" alt="capa do livro" width="400"/&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;A busca bin√°ria em&amp;nbsp;resumo&lt;/h2&gt;
&lt;p&gt;Imagine uma lista telef√¥nica com &lt;strong&gt;1 milh√£o de nomes&lt;/strong&gt;. J√° pensou em ter que folhe√°-la inteira? Existe um jeito de encontrar qualquer nome com no &lt;strong&gt;m√°ximo 20 tentativas&lt;/strong&gt;, eliminando a cada passo metade das op√ß√µes, isso √© o que chamamos de &lt;strong&gt;busca bin√°ria&lt;/strong&gt;.
Na busca bin√°ria, cada vez que dobramos o tamanho da lista, precisamos de apenas mais 1&amp;nbsp;passo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Observa√ß√£o importante&lt;/strong&gt;: numa lista telef√¥nica f√≠sica, a gente j√° sabe pular quase direto para a letra certa, o que lembra mais o funcionamento de um hashmap (ou dict no Python), que encontra um item em tempo constante. Mas no computador, quando temos apenas uma lista ordenada&amp;nbsp;(como &lt;code&gt;[1, 3, 5, 7, 9, 11, 13]&lt;/code&gt;), n√£o existe esse ‚Äúpulo m√°gico‚Äù, √© a√≠ que a busca bin√°ria pode ajudar, cortando a lista ao meio de forma sistem√°tica at√© encontrar (ou concluir que o elemento n√£o est√°&amp;nbsp;l√°).&lt;/p&gt;
&lt;p&gt;Legal n√©? Isso √© ci√™ncia da computa√ß√£o&amp;nbsp;üíÅ‚Äç‚ôÄÔ∏è‚ú®&lt;/p&gt;
&lt;h3&gt;Exemplos b√°sicos de busca&amp;nbsp;bin√°ria:&lt;/h3&gt;
&lt;p&gt;Pense em um n√∫mero entre 1 e 100. D√° para adivinhar em, no m√°ximo, 7&amp;nbsp;tentativas:&lt;/p&gt;
&lt;p&gt;Minha primeira pergunta: &amp;#8220;√â&amp;nbsp;50?&amp;#8221;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se voc√™ disser &amp;#8220;maior&amp;#8221;, eu sei que est√° entre 51 e&amp;nbsp;100&lt;/li&gt;
&lt;li&gt;Se disser &amp;#8220;menor&amp;#8221;, est√° entre 1 e&amp;nbsp;49&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Segunda pergunta: Digamos que seja maior que 50. &amp;#8220;√â 75?&amp;#8221; (meio entre 51 e&amp;nbsp;100)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maior? Est√° entre 76 e&amp;nbsp;100&lt;/li&gt;
&lt;li&gt;Menor? Est√° entre 51 e&amp;nbsp;74&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E assim por diante, sempre eliminando metade das&amp;nbsp;possibilidades.&lt;/p&gt;
&lt;p&gt;Seguindo a mesma l√≥gica do exemplo anterior, vamos ver como fica com uma quantidade maior de&amp;nbsp;n√∫meros:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Itens na lista&lt;/th&gt;
&lt;th&gt;Busca linear (tentativas)&lt;/th&gt;
&lt;th&gt;Busca bin√°ria (tentativas)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1.000&lt;/td&gt;
&lt;td&gt;at√© 1.000&lt;/td&gt;
&lt;td&gt;at√© 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1.000.000&lt;/td&gt;
&lt;td&gt;at√© 1.000.000&lt;/td&gt;
&lt;td&gt;at√© 20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;span class="caps"&gt;VINTE&lt;/span&gt; tentativas para encontrar algo entre 1 milh√£o de&amp;nbsp;op√ß√µes!!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Agora que vimos como ela funciona, vale notar que a busca bin√°ria n√£o est√° restrita a livros, ela aparece em v√°rias situa√ß√µes do nosso dia a&amp;nbsp;dia&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sistemas de busca (Google, WhatsApp, Spotify)&lt;/strong&gt;: por tr√°s, usam varia√ß√µes de busca bin√°ria em listas ordenadas ou&amp;nbsp;√≠ndices.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Filtragem de dados&lt;/strong&gt;: encontrar rapidamente um registro espec√≠fico em planilhas ou bases de dados&amp;nbsp;grandes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Depura√ß√£o de c√≥digo&lt;/strong&gt;: reduzir o espa√ßo do problema pela metade a cada teste para achar onde o bug&amp;nbsp;est√°.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Observa√ß√£o: para que a busca bin√°ria funcione, os dados precisam estar&amp;nbsp;ordenados.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2&gt;Vamos praticar&amp;nbsp;rapidinho?&lt;/h2&gt;
&lt;p&gt;Aqui est√° uma lista ordenada de&amp;nbsp;n√∫meros: &lt;code&gt;[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Tente encontrar o n√∫mero 22 de duas&amp;nbsp;formas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Busca linear:&lt;/strong&gt; V√° um a um desde o&amp;nbsp;2.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Busca bin√°ria:&lt;/strong&gt; Comece no meio, elimine metade a cada&amp;nbsp;passo.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Compare quantos passos cada m√©todo&amp;nbsp;precisou&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Curiosidades&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;O git tem uma funcionalidade chamada &lt;a href="https://git-scm.com/docs/git-bisect"&gt;&lt;code&gt;git bisect&lt;/code&gt;&lt;/a&gt; que usa busca bin√°ria para ajudar desenvolvedores a encontrarem&amp;nbsp;bug&lt;/li&gt;
&lt;li&gt;Se o item que estamos buscando for o primeiro item da lista, esse √© o melhor caso na busca linear e o pior caso na busca&amp;nbsp;bin√°ria&lt;/li&gt;
&lt;li&gt;A implementa√ß√£o&amp;nbsp;do &lt;code&gt;sortedcontainers&lt;/code&gt; usa busca bin√°ria (a partir do m√≥dulo bisect), &lt;a href="https://grantjenks.com/docs/sortedcontainers/_modules/sortedcontainers/sortedlist.html#SortedList"&gt;veja&amp;nbsp;aqui&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Exerc√≠cios recomendados&amp;nbsp;üë©üèª‚Äçüíªüíû&lt;/h2&gt;
&lt;p&gt;Para refor√ßar o aprendizado, aqui v√£o alguns desafios&amp;nbsp;pr√°ticos:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LeetCode&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/binary-search/description/"&gt;Binary Search&lt;/a&gt; ‚Äî implementa√ß√£o&amp;nbsp;direta.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/search-insert-position/description/"&gt;Search Insert Position&lt;/a&gt; ‚Äî varia√ß√£o para encontrar onde inserir um&amp;nbsp;n√∫mero.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/first-bad-version/description/"&gt;First Bad Version&lt;/a&gt; ‚Äî busca bin√°ria aplicada em &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Exercism&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://exercism.org/tracks/python/exercises/binary-search"&gt;Binary Search (Python Track)&lt;/a&gt; ‚Äî implementa√ß√£o e&amp;nbsp;testes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Dica: resolva primeiro o problema sem olhar a solu√ß√£o e depois compare com implementa√ß√µes&amp;nbsp;otimizadas.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;E assim come√ßa meu roadmap de estudo: cada cap√≠tulo do livro vem acompanhado de exerc√≠cios para fixar o&amp;nbsp;conte√∫do.&lt;/p&gt;</content><category term="Entendendo algoritmos"/></entry></feed>